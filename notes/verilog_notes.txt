Verilog Notes:
 
Terms:
    -Verilog HDL, can be used for hardware simulation and creation
    -Behavior Modeling:
        -circuit described by the behavior/general logic
    -Structural Modeling:
        -circuit describes specific hardware elements that connect
    -RTL:
        -Register Transfer Level, Behavioral modeling type, used to synthesize
    -Synthesis:
        -Translating HDL to a circuit with optimizations
    -RTL Synthesis:
        -Translating an RTL model into optimizated gate level model
    -Translation:
        -Code translated into desired hardware model using a synthesis engine
    -Optimization:
        -Hardware model simpilified or modified for better results

Modules:
    -Case sensitive, keywords are lowercase
    -comments begin with //, multi line are /* */
    -semicolon is terminator
    -General Structure:
        module mod_name(port_list);
            //port declarations
            //data type declarations
            //circuit functionality
            //timing specifications
        endmodule
    -can be used at a higher level code by the syntax
        module_name #time_delay(optional) this_module_name (port_list);

Port Lists:
    -contain input, outputs, and bidirectionals (inout)
    -port types:
        input
            -cannot be declared as variable, can have variable or net passed in though
        output
            -can be declared as either variable or net, can only drive out to a net though
        bidirectional
            -can only be declared as a net, can drive into/from a net only
        
    SYNTAX:
        port_type [MSB:LSB] port_name
    -can declare types in port list (within () after module_name)
    -Instantiate port lists either by
        -ordered list: module_name this_name(1st, 2nd, 3rd, 4th); (arguments are passed to formal port list in order)
        -by port name: module_name this_name(.a(2nd), .c(3rd), .b(1st), .d(4th)) (arguments are paired with formal specific port, any order)
    
Data Types:
    -Net:
        -represent physical interconnect between blocks, always flowing, no stored value
        -need continous assign state
        -Net Data Types:
            wire - node or connection
            tri - tri-state note
            supply0 - hard code logic 0
            supply1 - hard code logic 1
        
    -Variable (register ?):
        -represent element to store data
        -can only be assinged with a procedure, task, or function
        -Variable Data Types:
            reg - unsigned bit arbitrary size register
            integer - signed 32-bit
        -Size specified by value format
            FORMAT
                {sign}{bitsize}'{base-code d,h,b,o,s}{number}
            ex:
                3'b010 3bit wide binary number
            -wildcards x and z
    -Default port type is wire if not declared
    
Assignment:
    Continuous:
        -Combinatorial Logic
        -Left hand identifier must be a net data type
        -Always active, change in an input on right side changes value on left side.
        SYNTAX:
            data_type[MSB:LSB] lhs_ident = expression;
            OR
            data_type[MSB:LSB] lhs_ident;
            assign lhs_ident = expression;
    Procedural:
        -In procedural blocks
        -each block starts at sim_time=0 and run in parallel
        -initial block
            -used to intialize behavorial statements for simulation
            -executes only once at sim_time=0
            -begin and end keywords used to contain initial block
        -always block
            -used to describe circuits fuctionality using behavorial statements
            -continuously execute starting from sim_time=0
            -multiple procedure block execute concurrently (parallel)
            
        Ex:
            module clk_gen #(parameter period = 50) (output reg clk);
                initial clk = 1'b0;
                always
                    #(period/2) clk = ~clk;
                initial #100 $finish
        = (Blocking Assignment):
            -use for combinatorial logic usually
            -finishes current assingment/expression before going onto next statement after this one
            -LHS is only variable type
        <= (Non-Blocking Assignment):
            -use for sequential logic usually
            -Schedules assignment to execute at end of time step, moves onto next statement before executing current statement
            -saves current state of data types in assingment/expression (as they are in that moment)
                -if previous non blocking modifications to data in your current expression are scheduled but not executed, it will not affect current statement
Behavorial Statements:
    -if-else, case, or loops must be in a procedural block (initial or always)
    -if-else:
        -prioritization of conditions, equivalent to chained mux gates
    -case:
        -conditions evaluated all at once, equivalent to one big mux
        -casez and casex variations,
            -casez treats z and ? as don't cares
            -casex treates x, z, and ? as don't cares
    -loop:
        forever:
            -endless execution, make sure clk progresses though otherwise infinite loop
            -not synthesizable
        repeat ({#})
            -repeated code section a {#} number of times
        while (condition)
            -basic to understand
            -not synthesizable
        for loop
            -basic syntax
            -implemented as mutliple versions of same circuit
RTL Processes:
    -Combinatorial Process:
        always @ (data names)/*
            -see Assignments/Procedural/always block
            -can define a sensitivity list of data names to act as triggers to run block if data names are changed
    -Clocked/Sequential Process:
        always @ (posedge clk, negedge clr_n)/*
            -see Assignments/Procedural/always block
            -can define a sensitivity list of whenever the clock is in a certain state
    
Functions:
    -usually for combinatorial output, must be defined within a module, called for return value
    -can only call other functions
    -only combinatorial logic
    SYNTAX:
        function func_name
         CODE BODY
            fun_name = something
        endfunction
Tasks:
    -used for anything (combinatorial or procedural), called as statement to do something
    -can be combinatorial or procedural calls to things
    SYNTAX:
        task task_name
        CODE BODY
        endtask
        
Arithmetic Operators (binary/unary):
    op1 operator op2 / operator{op}
    + (add or positive)
    - (subtract or negative)
    * (multiply)
    / (divide)
    % (modulus)
    ** (exponent)
    -Treat a vector/bus as whole value, carries are auto handled and will be lost in can't be put into result place size
    -ha

Bitwise Operators (binary):
    op1 operator op2
    ~ (bit flip)
    & (and)
    | (or)
    ^ (xor)
    ^~ (xnor)
    -operates on each bit pair, smaller of two operands in 0 left expanded

Reduction Operators (unary):
    operator{op} ex &i_a -> 1'b0
    & (and all bits)
    ~& (nand all bits)
    | (or all bits)
    ~| (nor all bits)
    ^ (xor all bits)
    ^~ (xnor all bits)
    
    -reduces a bus/vector to single bit, chains operation
    
Relational Operators (binary):
    op1 operator op2
    > (greater)
    >= (greater than or equal)
    < (less)
    <= (less than or equal)
    
    -return 1 or 0, unknown if either operand has x or z

Equality Operators(binary):
    op1 operator op2
    == (equality)
    != (inequality)
    === (case equality)
    !== (case inequality)
    -equality, only 1 and 0 are supported, so xz includsion in an operand and so unknown result
    -case inequality needs every symbol in operand number to be the same, x and Z included

Logical Operators (binary and unary):
    op1 operator op2 / operator{op}
    ! (logical not)
    && (logical and)
    || (logical or)
    
    -basic logic rules, values of zero are interpreted as false, non-zero values are true
    -unknown results with xz
    
Shift Operators (binary):
    op1 operator const
    << (logical shift left)
    >> (logical shift right)
    <<< (arithmetic shift left)
    >>> (arithmetic shift right)
    
    -arithmetic padds with msb (sign), logical pads with 0 regardless
    
Other Operators:

    (condition): true_value ? false_value (ternary)
    {} (bitwise concatenate)
    {repeat_value{thing_to_repeat}} (replicate)

Precedence List:
//  High to Low
//  ()
//  + - ! ~ ~& | ~| ^ ^~ etc (UNARY)
//  **
//  * / %
//  + - (BINARY)
//  << >> <<< >>>
//  < > <= >=
//  == != === !==
//  & (BINARY)
//  ^ ~^ ^~ (BINARY)
//  | (BINARY)
//  &&
//  ||
//  ?:
//  {} {{}}

Parameters:
    -Constant value assigned to a name, basically a const, name can be used as symbolic value later
        SYNTAX
            parameter param_name = value;
            local
    -can be overwritten at compile time in specific cases, localparam cannot
            


Operators:

    Always

    Bitwise
    
    Case
    
    Concatenation
    
    Conditional
    
    For Loop
    
    Forever Loop
    
    Function
    
    Logical

    Reductional
    
    Relational
    
    Repeat Loop
    
    Replicational
    
    Task
    
    While Loop


Naming Conventions:
    i_--- Used for inputs
    o_--- Used for outputs
    r_--- Used for registers
    w_--- Used for wires
