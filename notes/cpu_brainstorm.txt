Registers:
    -33 total(?) 0x0-31 + pc
    -x0 is always 0
    -pc holds current instruction address
    -Store boolean, unsigned or two's complement integers


Instructions:
    -rs1,rs2, and rd are in the same bit position in all instructions
        -does make immediates more annoying apparently?
        -rs1 i[19:15]
        -rs2 i[24:20]
        -rd  i[11:7]
    -opcode is always i[6:0]
        -presumably sets some control bits and instruction path for how the data is handled, so not exactly just an identifier but affects instruction path, func
    -func3 is in [14:12] for most types
        -used to designate what specific instruction within the format we want to use, presumably affects some control bits/exection of the alu or mux gates 
    -immediates are sign extended
        -immediates for relevant instruction types are specifically reconstructed (pg 17 riscv spec)
        -uses i[31]
    
Will have to program in exception behavior eventually
    -integer computations won't cause exceptions
        -except maybe overflow if I want that?
    -Ex:
        exception on taken braken to a non aligned instruction

Instruction Fetch:
    instr (32-bit integer) taken from ROM by current PC pointer

Instruction Decode:
    (RISBUJ) opcode     = i[6:0]
    (RI__UJ) rd         = i[11:7]
    (__S___) im[4:0]    = i[11:7]
    (___B__) im[4:1]    = i[11:8]
    (___B__) im[11]     = i[7]
    (____U_) im[31:12]  = i[31:12]
    (RISB__) func3      = i[14:12]
    (RISB__) rs1        = i[19:15]
    (R_SB__) rs2        = i[24:20]
    (_I____) im[11:0]   = i[31:20]
    (R_____) funct7     = i[31:25]
    (__S___) im[11:5]   = i[31:25]
    (___B__) im[10:5]   = i[30:25]
    (___B__) im[12]     = i[31]
    (_____J) im[19:12]  = i[19:12]
    (_____J) im[11]     = i[20]
    (_____J) im[10:1]   = i[30:21]
    (_____J) im[20]     = i[31]
    
Execute:

Memory RW:

Register Write:
